name: Dotnet - Release

on:
  push:
    branches: [master,integration,feature/**]
  pull_request:
    branches: [master,integration,feature/**]

env:
  Branches: master,integration,feature/**
  MainBranch: master
  NugetSource: https://api.nuget.org
  IncludeSymbols: false

jobs:
  build:
    # Build And Publish
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
      # checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      # set variables
      - name: Set variables
        id: vars
        run: |
          branch=${GITHUB_REF##*/}

          echo ::set-output name=branchName::$branch
           
          if [ "$branch" == "${{ env.MainBranch }}" ]
          then
              echo "::set-output name=versionBump::minor"
          else
              echo "::set-output name=versionBump::patch"
          fi

      - run: |
          echo "Set Variable Checks ${{ github.ref }}"
          echo "Current branch is ${{ steps.vars.outputs.branchName }}"
          echo "Version bump type is ${{ steps.vars.outputs.versionBump }}"

      # bump version and push tag
      - name: Bump version and push tag
        uses: fathym/github-tag-action@master
        id: versionBump
        env:
          DEFAULT_BUMP: ${{ steps.vars.outputs.versionBump }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: .*
          WITH_V: false
      - run: echo "New version is ${{ steps.versionBump.outputs.new_tag }}"


      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          

      # Publish Fathym
      - name: Publish Fathym
        id: publish_fathym
        uses: brandedoutcast/publish-nuget@v2
        with:
          # Filepath of the project to be packaged, relative to root of repository
          PROJECT_FILE_PATH: Fathym/Fathym.csproj
          
          # NuGet package id, used for version detection & defaults to project name
          PACKAGE_NAME: Fathym         
          
          # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX
          VERSION_STATIC: ${{ steps.versionBump.outputs.new_tag }}

          # Flag to toggle git tagging, enabled by default
          TAG_COMMIT: false

          # API key to authenticate with NuGet server
          NUGET_KEY: ${{secrets.NUGET_API_KEY}}

          # NuGet server uri hosting the packages, defaults to https://api.nuget.org
          NUGET_SOURCE: ${{ env.NugetSource }}

          # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
          INCLUDE_SYMBOLS: ${{ env.IncludeSymbols }}     

      # Publish Fathym.API
      - name: Publish Fathym API
        id: publish_fathym_api
        uses: brandedoutcast/publish-nuget@v2
        with:
          # Filepath of the project to be packaged, relative to root of repository
          PROJECT_FILE_PATH: Fathym.API/Fathym.API.csproj
          
          # NuGet package id, used for version detection & defaults to project name
          PACKAGE_NAME: Fathym.API         
          
          # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX
          VERSION_STATIC: ${{ steps.versionBump.outputs.new_tag }}

          # Flag to toggle git tagging, enabled by default
          TAG_COMMIT: false

          # API key to authenticate with NuGet server
          NUGET_KEY: ${{secrets.NUGET_API_KEY}}

          # NuGet server uri hosting the packages, defaults to https://api.nuget.org
          NUGET_SOURCE: ${{ env.NugetSource }}

          # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
          INCLUDE_SYMBOLS: ${{ env.IncludeSymbols }}   
          
      # Publish Fathym.Presentation
      - name: Publish Fathym Presentation
        id: publish_fathym_presentation
        uses: brandedoutcast/publish-nuget@v2
        with:
          # Filepath of the project to be packaged, relative to root of repository
          PROJECT_FILE_PATH: Fathym.Presentation/Fathym.Presentation.csproj
          
          # NuGet package id, used for version detection & defaults to project name
          PACKAGE_NAME: Fathym.Presentation         
          
          # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX
          VERSION_STATIC: ${{ steps.versionBump.outputs.new_tag }}

          # Flag to toggle git tagging, enabled by default
          TAG_COMMIT: false

          # API key to authenticate with NuGet server
          NUGET_KEY: ${{secrets.NUGET_API_KEY}}

          # NuGet server uri hosting the packages, defaults to https://api.nuget.org
          NUGET_SOURCE: ${{ env.NugetSource }}

          # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
          INCLUDE_SYMBOLS: ${{ env.IncludeSymbols }}         

      # Publish Fathym.Presentation.MVC
      - name: Publish Fathym Presentation MVC
        id: publish_fathym_presentation_mvc
        uses: brandedoutcast/publish-nuget@v2
        with:
          # Filepath of the project to be packaged, relative to root of repository
          PROJECT_FILE_PATH: Fathym.Presentation.MVC/Fathym.Presentation.MVC.csproj
          
          # NuGet package id, used for version detection & defaults to project name
          PACKAGE_NAME: Fathym.Presentation.MVC         
          
          # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX
          VERSION_STATIC: ${{ steps.versionBump.outputs.new_tag }}

          # Flag to toggle git tagging, enabled by default
          TAG_COMMIT: false

          # API key to authenticate with NuGet server
          NUGET_KEY: ${{secrets.NUGET_API_KEY}}

          # NuGet server uri hosting the packages, defaults to https://api.nuget.org
          NUGET_SOURCE: ${{ env.NugetSource }}

          # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
          INCLUDE_SYMBOLS: ${{ env.IncludeSymbols }} 